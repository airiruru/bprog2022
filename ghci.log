GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-05-19 15:51:02.396344559
>>> 23+5
28
2022-05-19 15:54:05.021852232
>>> 3+2*5
13
2022-05-19 15:54:46.267138184
>>> ５－４－８

<interactive>:3:1: error: lexical error at character '\65301'
2022-05-19 15:55:34.365614825
>>> 5-4-8
-7
2022-05-19 15:56:15.033880831
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:36.074322856
>>> double 3

<interactive>:6:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:01.130819772
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-05-26 15:02:10.564346078
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:40.395876165
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:07.121857176
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:32.350636279
>>> :e src/First.hs
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:05.365067949
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:05.432628548
>>> double 3
6
2022-05-26 15:56:17.638454464
>>> double 123
246
2022-05-26 15:56:26.508689954
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-09 14:55:12.813874413
>>> 2 + 3 * 4
14
2022-06-09 14:58:29.872138735
>>> (2 + 3)*4
20
2022-06-09 15:00:19.083104153
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:00:41.315695385
>>> sqrt (3 ^ 2 + 4 ^ 2)
5.0
2022-06-09 15:05:09.196208533
>>> sqrt (25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:11.706994874
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:34.573539699
>>> sqrt 25
5.0
2022-06-09 15:09:55.942383998
>>> hoge 25 :: Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:18.819338013
>>> head [1, 2, 3]
1
2022-06-09 15:46:17.139226555
>>> head[3, 1, 4, 1, 5]
3
2022-06-09 15:46:40.222152092
>>> head[]
*** Exception: Prelude.head: empty list
2022-06-09 15:48:23.436564339
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:50:40.461429757
>>> hoge
[3,1,4,1,5]
2022-06-09 15:50:51.415538114
>>> head hoge
3
2022-06-09 15:51:18.537730781
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:25.786278626
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:31.830364555
>>> hoge !! 0
3
2022-06-09 15:55:00.641738711
>>> hoge !! 2 hoge

<interactive>:18:9: error:
    • No instance for (Num ([Int] -> Int)) arising from the literal ‘2’
        (maybe you haven't applied a function to enough arguments?)
    • In the expression: 2
      In the second argument of ‘(!!)’, namely ‘2 hoge’
      In the expression: hoge !! 2 hoge
2022-06-09 15:55:29.279708442
>>> hoge !! 2
4
2022-06-09 15:55:40.73201761
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:27.619156147
>>> hoge
[3,1,4,1,5]
2022-06-09 15:56:58.808198871
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:15.689601061
>>> hoge 5 hoge

<interactive>:23:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:23:1)
2022-06-09 15:58:17.998375176
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:58:49.46773618
>>> take 10

<interactive>:25:1: error:
    • No instance for (Show ([a0] -> [a0]))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-09 15:59:07.835335647
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:25.574993337
>>> drop 10 hoge
[]
2022-06-09 15:59:44.366244469
>>> length hoge
5
2022-06-09 16:01:01.216415586
>>> length []
0
2022-06-09 16:01:16.620737084
>>> sam hoge

<interactive>:30:1: error:
    • Variable not in scope: sam :: [Int] -> t
    • Perhaps you meant ‘sum’ (imported from Prelude)
2022-06-09 16:01:57.565086605
>>> sum hoge
14
2022-06-09 16:02:15.215298307
>>> product hoge
60
2022-06-09 16:02:30.274748191
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:40.904285116
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:26.3799221
>>> :e src/First.hs
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
Ok, no modules loaded.
2022-06-09 16:07:37.289043687
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:07:37.354054789
>>> double 3 + 3
9
2022-06-09 16:08:00.813599819
>>> double (3 + 3)
12
2022-06-09 16:11:09.116644839
>>> 
2022-06-09 16:11:17.583992091
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/airi/bprog2022/.ghci
2022-06-16 15:02:18.251187554
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:11.993994282
>>> :e src/First.hs
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:47.471153682
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:47.533332906
>>> 
2022-06-16 15:11:36.616337732
>>> double

<interactive>:5:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:12:57.406339211
>>> take (double 2) [1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:15:06.188303805
>>> 
2022-06-16 15:19:59.313947838
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:09.784102349
>>> :e
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:21:01.376981891
>>> factorial 3
6
2022-06-16 15:22:06.632714179
>>> factorial 4
24
2022-06-16 15:22:22.207154786
>>> :e
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: Int -> Int
  13      average xs = sum xs `div` length xs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:22: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 |     average xs = sum xs `div` length xs
   |                      ^^

src/First.hs:13:38: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 |     average xs = sum xs `div` length xs
   |                                      ^^
Failed, no modules loaded.
2022-06-16 15:37:18.504982493
>>> :e
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: [Int] -> Int
  13      average xs = sum xs `div` length xs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:38:03.719913554
>>> :e
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: [Int] -> Int
  13      average xs = sum xs `div` length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div (sum xs) (length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:39:26.491822575
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:49:51.829271026
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:00.157991579
>>> :e
   1  module　First　where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: [Int] -> Int
  13      average xs = sum xs `div` length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div (sum xs) (length xs)
  17  
  18      myinit :: [a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) =x : init xs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:14:28.144077646
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:14:41.088455682
>>> myinit []
*** Exception: src/First.hs:(19,5)-(20,30): Non-exhaustive patterns in function myinit

2022-06-16 16:14:56.250198916
>>> :q
Leaving GHCi.
